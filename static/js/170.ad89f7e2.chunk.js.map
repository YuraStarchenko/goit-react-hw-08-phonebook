{"version":3,"file":"static/js/170.ad89f7e2.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","pages/Container.styled.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","redux/filter/filterSlice.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field as FormikInput, Form as FormikForm } from 'formik';\n\nexport const Label = styled.label`\n  width: 100%;\n  margin: 0 auto;\n`;\n\nexport const Form = styled(FormikForm)`\n  margin: 10px 0;\n`;\n\nexport const Input = styled(FormikInput)`\n  display: flex;\n  width: 250px;\n  padding: 8px;\n  padding-left: 22px;\n  font: inherit;\n  outline: transparent;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 20px;\n  margin: 10px 0;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  align-items: center;\n  justify-content: center;\n  min-width: 170px;\n  height: 40px;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  color: #ffffff;\n  background-color: blue;\n  border: none;\n  border-radius: 20px;\n  margin: 20px auto 0;\n  transition-property: background-color, fill;\n  transition-duration: 250ms;\n  cursor: pointer;\n  &:hover {\n    background-color: #2196f3;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;","import { Label, Form, Input, Button } from './ContactForm.styled.js';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors.jsx';\nimport { addContact } from 'redux/contacts/operations.jsx';\nimport { Formik } from 'formik';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (value, { resetForm }) => {\n    let isDuplicate = true;\n\n    contacts.map(\n      item =>\n        (isDuplicate = !item.name\n          .toLowerCase()\n          .includes(value.name.toLowerCase()))\n    );\n    if (isDuplicate) {\n      const contact = { name: value.name, phone: value.number };\n      dispatch(addContact(contact));\n      resetForm();\n    } else {\n      Notify.info(`${value.name} is already in contacts`);\n    }\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Label htmlFor=\"name\">\n            Name\n            <Input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter your name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </Label>\n          <Label htmlFor=\"number\">\n            Number\n            <Input\n              id=\"number\"\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter your number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </Label>\n          <Button type=\"submit\">Add contacts</Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 40px;\n`;\n\nexport const Book = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  border: solid 3px #fbdddd;\n  width: 350px;\n  border-radius: 40px;\n  background-color: #f2ecec;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n`;\n\nexport const Text = styled.p`\n  margin: 10px 0;\n`;\n\nexport const Title = styled.h2`\n  margin: 20px 0;\n`;\n\nexport const TitleText = styled.h1`\n  margin: 20px 10px 0;\n`;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-left: 0;\n  margin-bottom: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Btn = styled.button`\n  min-width: 50px;\n  height: 30px;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  color: #ffffff;\n  background-color: blue;\n  border: none;\n  border-radius: 20px;\n  margin: 10px 0;\n  transition-property: background-color, fill;\n  transition-duration: 250ms;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #2196f3;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nexport const Text = styled.p`\n  font-weight: 500;\n  font-size: 14px;\n  margin-right: 10px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { List, Item, Btn, Text } from './ContactList.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filterContacts = contacts.filter(el =>\n    el.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n  );\n\n  return (\n    <List>\n      {filterContacts.map(({ phone, name, id }) => {\n        return (\n          <Item key={id}>\n            <Text>\n              {name}: {phone}\n            </Text>\n            <Btn type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              delete\n            </Btn>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  display: flex;\n  width: 250px;\n  padding: 8px;\n  padding-left: 22px;\n  font: inherit;\n  outline: transparent;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 20px;\n  margin-bottom: 15px;\n`;","import { createSlice } from '@reduxjs/toolkit';\n\nconst filtersInitialState = '';\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: filtersInitialState,\n  reducers: {\n    setFilter: {\n      reducer(_, action) {\n        return action.payload;\n      },\n    },\n  },\n});\n\nexport const { setFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Input } from './Filter.styled.js';\nimport { setFilter } from 'redux/filter/filterSlice.jsx';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n\n  return (\n    <Input\n      type=\"text\"\n      name=\"filter\"\n      title=\"Filter\"\n      onChange={e => dispatch(setFilter(e.target.value))}\n      value={value}\n    />\n  );\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { GlobalStyle } from '../GlobalStyle';\nimport { Container, Text, Title, TitleText, Book } from './Container.styled.js';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Book>\n        <TitleText>Phonebook</TitleText>\n        <ContactForm />\n        <Title>Contacts</Title>\n        <Text>find contact by name</Text>\n        <Filter />\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Book>\n      <GlobalStyle />\n    </Container>\n  );\n};\n"],"names":["Label","styled","Form","FormikForm","Input","FormikInput","Button","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","ContactForm","dispatch","useDispatch","useSelector","initialValues","name","number","onSubmit","value","resetForm","isDuplicate","map","item","toLowerCase","includes","contact","phone","addContact","Notify","htmlFor","id","type","placeholder","pattern","title","required","Container","Book","Text","Title","TitleText","List","Item","Btn","ContactList","filterContacts","el","toLocaleLowerCase","onClick","deleteContact","filterSlice","createSlice","initialState","reducers","setFilter","reducer","_","action","payload","actions","Filter","onChange","e","target","Contacts","useEffect","fetchContacts","GlobalStyle"],"sourceRoot":""}